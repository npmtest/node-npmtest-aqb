{"/home/travis/build/npmtest/node-npmtest-aqb/test.js":"/* istanbul instrument in package npmtest_aqb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aqb/lib.npmtest_aqb.js":"/* istanbul instrument in package npmtest_aqb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aqb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aqb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aqb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aqb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aqb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aqb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aqb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aqb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aqb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aqb.__dirname + '/lib.npmtest_aqb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aqb/node_modules/aqb/index.js":"/*jshint browserify: true */\n/*globals console: false */\n'use strict';\nvar console = require('console');\nvar AqlError = require('./errors').AqlError;\nvar assumptions = require('./assumptions');\nvar types = require('./types');\n\nfunction QB(obj) {\n  if (typeof obj === 'string') {\n    return QB.str(obj);\n  }\n  if (obj === null || obj === undefined) {\n    return new types.NullLiteral();\n  }\n  if (typeof obj === 'object') {\n    if (obj instanceof Date) {\n      return types.autoCastToken(JSON.stringify(obj));\n    }\n    if (obj instanceof Array) {\n      return new types.ListLiteral(obj.map(QB));\n    }\n    var result = {};\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result[JSON.stringify(key)] = QB(obj[key]);\n      }\n    }\n    return new types.ObjectLiteral(result);\n  }\n  return types.autoCastToken(obj);\n}\n\nObject.keys(types._PartialStatement.prototype).forEach(function (key) {\n  if (key === 'constructor') return;\n  QB[key] = types._PartialStatement.prototype[key].bind(null);\n});\n\nObject.keys(types._Expression.prototype).forEach(function (key) {\n  if (key === 'constructor' || key === 'then') return;\n  QB[key] = function () {\n    return types._Expression.prototype[key].apply(\n      types.autoCastToken(arguments[0]),\n      Array.prototype.slice.call(arguments, 1)\n    );\n  };\n});\n\nQB.if = function (cond, then, otherwise) {\n  return types.autoCastToken(cond).then(then).else(otherwise);\n};\nQB.bool = function (value) {\n  return new types.BooleanLiteral(value);\n};\nQB.num = function (value) {\n  return new types.NumberLiteral(value);\n};\nQB.int = function (value) {\n  return new types.IntegerLiteral(value);\n};\nQB.str = function (value) {\n  return new types.StringLiteral(value);\n};\nQB.list = function (arr) {\n  return new types.ListLiteral(arr);\n};\nQB.obj = function (obj) {\n  return new types.ObjectLiteral(obj);\n};\nQB.ref = function (value) {\n  if (types.Identifier.re.exec(value)) {\n    return new types.Identifier(value);\n  }\n  return new types.SimpleReference(value);\n};\nQB.expr = function (value) {\n  return new types.RawExpression(value);\n};\nQB.fn = function (functionName, arity) {\n  if (typeof arity === 'number') {\n    arity = [arity];\n  }\n  return function () {\n    var args = Array.prototype.slice.call(arguments), valid, i;\n    if (arity) {\n      valid = false;\n      for (i = 0; !valid && i < arity.length; i++) {\n        if (typeof arity[i] === 'number') {\n          if (args.length === arity[i]) {\n            valid = true;\n          }\n        } else if (\n          Object.prototype.toString.call(arity[i]) === '[object Array]' &&\n            args.length >= arity[i][0] && args.length <= arity[i][1]\n        ) {\n          valid = true;\n        }\n      }\n      if (!valid) {\n        throw new AqlError(\n          'Invalid number of arguments for function ' +\n            functionName + ': ' + args.length\n        );\n      }\n    }\n    return new types.FunctionCall(functionName, args);\n  };\n};\n\nfunction deprecateAqlFunction(fn, functionName) {\n  return function () {\n    console.warn('The AQL function ' + functionName + ' is deprecated!');\n    return fn.apply(this, arguments);\n  };\n}\n\nObject.keys(assumptions.builtins).forEach(function (key) {\n  QB[key] = QB.fn(key, assumptions.builtins[key]);\n  if (assumptions.deprecatedBuiltins.indexOf(key) !== -1) {\n    QB[key] = deprecateAqlFunction(QB[key], key);\n  }\n});\n\nmodule.exports = QB;\n","/home/travis/build/npmtest/node-npmtest-aqb/node_modules/aqb/errors.js":"/*jshint browserify: true */\n'use strict';\nfunction AqlError(message) {\n  this.message = message;\n  var err = new Error(message);\n  err.name = this.name;\n  if (err.hasOwnProperty('stack')) this.stack = err.stack;\n  if (err.hasOwnProperty('description')) this.description = err.description;\n  if (err.hasOwnProperty('lineNumber')) this.lineNumber = err.lineNumber;\n  if (err.hasOwnProperty('fileName')) this.fileName = err.fileName;\n}\nAqlError.prototype = new Error();\nAqlError.prototype.constructor = AqlError;\nAqlError.prototype.name = 'AqlError';\n\nexports.AqlError = AqlError;\n","/home/travis/build/npmtest/node-npmtest-aqb/node_modules/aqb/assumptions.js":"/*jshint browserify: true */\n'use strict';\nexports.keywords = [\n  'asc',\n  'collect',\n  'desc',\n  'distinct',\n  'false',\n  'filter',\n  'for',\n  'in',\n  'insert',\n  'into',\n  'new',\n  'let',\n  'limit',\n  'old',\n  'null',\n  'remove',\n  'replace',\n  'return',\n  'sort',\n  'true',\n  'update',\n  'with'\n];\n\nexports.builtins = {\n  // Conversion\n  TO_BOOL: 1, TO_NUMBER: 1, TO_STRING: 1, TO_LIST: 1,\n  // Type checks\n  IS_NULL: 1, IS_BOOL: 1, IS_NUMBER: 1, IS_STRING: 1, IS_LIST: 1, IS_DOCUMENT: 1,\n  // String functions\n  CONCAT: [[1, Infinity]], CONCAT_SEPARATOR: [[2, Infinity]],\n  CHAR_LENGTH: 1, LENGTH: 1, LOWER: 1, UPPER: 1, SUBSTRING: [2, 3],\n  LEFT: 2, RIGHT: 2, TRIM: [1, 2], REVERSE: 1, CONTAINS: [2, 3], LIKE: 3,\n  LTRIM: [1, 2], RTRIM: [1, 2], FIND_FIRST: [2, 3, 4], FIND_LAST: [2, 3, 4],\n  SPLIT: [1, 2, 3], SUBSTITUTE: [2, 3, 4], MD5: 1, SHA1: 1, RANDOM_TOKEN: 1,\n  // Numeric functions\n  FLOOR: 1, CEIL: 1, ROUND: 1, ABS: 1, SQRT: 1, RAND: 0,\n  // Date functions\n  DATE_TIMESTAMP: [1, [3, 7]], DATE_ISO8601: [1, [3, 7]],\n  DATE_DAYOFWEEK: 1, DATE_YEAR: 1, DATE_MONTH: 1, DATE_DAY: 1,\n  DATE_HOUR: 1, DATE_MINUTE: 1, DATE_SECOND: 1, DATE_MILLISECOND: 1,\n  DATE_NOW: 0,\n  // List functions\n  /*LENGTH: 1,*/ FLATTEN: [1, 2], MIN: 1, MAX: 1, AVERAGE: 1, SUM: 1,\n  MEDIAN: 1, PERCENTILE: [2, 3], VARIANCE_POPULATION: 1, VARIANCE_SAMPLE: 1,\n  STDDEV_POPULATION: 1, STDDEV_SAMPLE: 1, /*REVERSE: 1,*/\n  FIRST: 1, LAST: 1, NTH: 2, POSITION: [2, 3], SLICE: [2, 3],\n  UNIQUE: 1, UNION: [[1, Infinity]], UNION_DISTINCT: [[1, Infinity]],\n  MINUS: [[1, Infinity]], INTERSECTION: [[1, Infinity]],\n  CALL: [[1, Infinity]], APPLY: [[1, Infinity]],\n  PUSH: [2, 3], APPEND: [2, 3], POP: 1, SHIFT: 1, UNSHIFT: [2, 3],\n  REMOVE_VALUE: [2, 3], REMOVE_VALUES: 2, REMOVE_NTH: 2,\n  // Document functions\n  MATCHES: [2, 3], MERGE: [[1, Infinity]], MERGE_RECURSIVE: [[1, Infinity]],\n  TRANSLATE: [2, 3], HAS: 2, ATTRIBUTES: [[1, 3]], UNSET: [[1, Infinity]],\n  KEEP: [[2, Infinity]], PARSE_IDENTIFIER: 1, ZIP: 2,\n  // Geo functions\n  NEAR: [5, 6], WITHIN: [5, 6], WITHIN_RECTANGLE: 5, IS_IN_POLYGON: [2, 3],\n  // Fulltext functions\n  FULLTEXT: 3,\n  // Graph functions\n  PATHS: [3, 4], TRAVERSAL: [5, 6], TRAVERSAL_TREE: [5, 6],\n  SHORTEST_PATH: [5, 6], EDGES: [3, 4], NEIGHBORS: [4, 5],\n  GRAPH_PATHS: [1, 2], GRAPH_SHORTEST_PATH: [3, 4], GRAPH_DISTANCE_TO: [3, 4],\n  GRAPH_TRAVERSAL: [3, 4], GRAPH_TRAVERSAL_TREE: [4, 5], GRAPH_EDGES: [2, 3],\n  GRAPH_VERTICES: [2, 3], GRAPH_NEIGHBORS: [2, 3], GRAPH_COMMON_NEIGHBORS: [3, 4, 5],\n  GRAPH_COMMON_PROPERTIES: [3, 4], GRAPH_ECCENTRICITY: [1, 2],\n  GRAPH_BETWEENNESS: [1, 2], GRAPH_CLOSENESS: [1, 2],\n  GRAPH_ABSOLUTE_ECCENTRICITY: [2, 3], GRAPH_ABSOLUTE_BETWEENNESS: [2, 3],\n  GRAPH_ABSOLUTE_CLOSENESS: [2, 3], GRAPH_DIAMETER: [1, 2], GRAPH_RADIUS: [1, 2],\n  // Control flow functions\n  NOT_NULL: [[1, Infinity]], FIRST_LIST: [[1, Infinity]],\n  FIRST_DOCUMENT: [[1, Infinity]],\n  // Miscellaneous functions\n  COLLECTIONS: 0, CURRENT_USER: 0, DOCUMENT: [1, 2], SKIPLIST: [[2, 4]]\n};\n\nexports.deprecatedBuiltins = [\n  'SKIPLIST'\n];\n","/home/travis/build/npmtest/node-npmtest-aqb/node_modules/aqb/types.js":"/*jshint browserify: true */\n'use strict';\nvar AqlError = require('./errors').AqlError;\nvar keywords = require('./assumptions').keywords;\n\nfunction toArray(self, args) {\n  var arr = Array.prototype.slice.call(args);\n  if (self) arr.unshift(self);\n  return arr;\n}\n\nfunction isQuotedString(str) {\n  return (\n    str.length >= 2 &&\n    str.charAt(0) === str.charAt(str.length - 1) &&\n    str.charAt(0) === '\"'\n  );\n}\n\nfunction wrapAQL(expr) {\n  if (\n    expr instanceof Operation ||\n    expr instanceof ReturnExpression ||\n    expr instanceof PartialStatement\n  ) {\n    return '(' + expr.toAQL() + ')';\n  }\n  return expr.toAQL();\n}\n\nfunction isValidNumber(number) {\n  return (\n    number === number &&\n    number !== Infinity &&\n    number !== -Infinity\n  );\n}\n\nfunction castNumber(number) {\n  if (Math.floor(number) === number) {\n    return new IntegerLiteral(number);\n  }\n  return new NumberLiteral(number);\n}\n\nfunction castBoolean(bool) {\n  return new BooleanLiteral(bool);\n}\n\nfunction castString(str) {\n  if (str.match(NumberLiteral.re)) {\n    return autoCastToken(Number(str));\n  }\n  if (isQuotedString(str)) {\n    return new StringLiteral(JSON.parse(str));\n  }\n  var match = str.match(RangeExpression.re);\n  if (match) {\n    return new RangeExpression(Number(match[1]), Number(match[2]));\n  }\n  if (str.match(Identifier.re)) {\n    return new Identifier(str);\n  }\n  return new SimpleReference(str);\n}\n\nfunction castObject(obj) {\n  if (obj.constructor && obj.constructor.name === 'ArangoCollection') {\n    return new Identifier(obj);\n  }\n  if (Array.isArray(obj)) {\n    return new ListLiteral(obj);\n  }\n  return new ObjectLiteral(obj);\n}\n\nfunction autoCastToken(token) {\n  if (token === null || token === undefined) {\n    return new NullLiteral();\n  }\n  if (token instanceof Expression || token instanceof PartialStatement) {\n    return token;\n  }\n  var type = typeof token;\n  if (!autoCastToken.hasOwnProperty(type)) {\n    throw new AqlError('Invalid AQL value: (' + type + ') ' + token);\n  }\n  return autoCastToken[type](token);\n}\nautoCastToken.number = castNumber;\nautoCastToken.boolean = castBoolean;\nautoCastToken.string = castString;\nautoCastToken.object = castObject;\n\nfunction Definitions(dfns) {\n  if (dfns instanceof Definitions) {\n    dfns = dfns._dfns;\n  }\n  this._dfns = [];\n  var self = this;\n  if (!dfns || typeof dfns !== 'object') {\n    throw new AqlError('Expected definitions to be an object');\n  }\n  if (Array.isArray(dfns)) {\n    dfns.forEach(function (dfn, i) {\n      if (!Array.isArray(dfn) || dfn.length !== 2) {\n        throw new AqlError('Expected definitions[' + i + '] to be a tuple');\n      }\n      self._dfns.push([new Identifier(dfn[0]), autoCastToken(dfn[1])]);\n    });\n  } else {\n    Object.keys(dfns).forEach(function (key) {\n      self._dfns.push([new Identifier(key), autoCastToken(dfns[key])]);\n    });\n  }\n  if (this._dfns.length === 0) {\n    throw new AqlError('Expected definitions not to be empty');\n  }\n}\nDefinitions.prototype.toAQL = function () {\n  return this._dfns.map(function (dfn) {\n    return dfn[0].toAQL() + ' = ' + wrapAQL(dfn[1]);\n  }).join(', ');\n};\n\nfunction Expression() {}\nExpression.prototype.range = Expression.prototype.to = function (max) {\n  return new RangeExpression(this, max);\n};\nExpression.prototype.get = function (/* keys... */) {\n  return new PropertyAccess(this, toArray(null, arguments));\n};\nExpression.prototype.and = function (/* x, y... */) {\n  return new NAryOperation('&&', toArray(this, arguments));\n};\nExpression.prototype.or = function (/* x, y... */) {\n  return new NAryOperation('||', toArray(this, arguments));\n};\nExpression.prototype.add = Expression.prototype.plus = function (/* x, y... */) {\n  return new NAryOperation('+', toArray(this, arguments));\n};\nExpression.prototype.sub = Expression.prototype.minus = function (/* x, y... */) {\n  return new NAryOperation('-', toArray(this, arguments));\n};\nExpression.prototype.mul = Expression.prototype.times = function (/* x, y... */) {\n  return new NAryOperation('*', toArray(this, arguments));\n};\nExpression.prototype.div = function (/* x, y... */) {\n  return new NAryOperation('/', toArray(this, arguments));\n};\nExpression.prototype.mod = function (/* x, y... */) {\n  return new NAryOperation('%', toArray(this, arguments));\n};\nExpression.prototype.eq = function (x) {\n  return new BinaryOperation('==', this, x);\n};\nExpression.prototype.gt = function (x) {\n  return new BinaryOperation('>', this, x);\n};\nExpression.prototype.gte = function (x) {\n  return new BinaryOperation('>=', this, x);\n};\nExpression.prototype.lt = function (x) {\n  return new BinaryOperation('<', this, x);\n};\nExpression.prototype.lte = function (x) {\n  return new BinaryOperation('<=', this, x);\n};\nExpression.prototype.neq = function (x) {\n  return new BinaryOperation('!=', this, x);\n};\nExpression.prototype.not = function () {\n  return new UnaryOperation('!', this);\n};\nExpression.prototype.neg = function () {\n  return new UnaryOperation('-', this);\n};\nExpression.prototype.in = function (x) {\n  return new BinaryOperation('in', this, x);\n};\nExpression.prototype.notIn = function (x) {\n  return new BinaryOperation('not in', this, x);\n};\nExpression.prototype.then = function (x) {\n  var self = this;\n  var elseFn = function (y) {\n    return new TernaryOperation('?', ':', self, x, y);\n  };\n  return {else: elseFn, else_: elseFn, otherwise: elseFn};\n};\n\n\nfunction Operation() {}\nOperation.prototype = new Expression();\nOperation.prototype.constructor = Operation;\n\nfunction RawExpression(value) {\n  if (value && value instanceof RawExpression) value = value._value;\n  this._value = value;\n}\nRawExpression.prototype = new Expression();\nRawExpression.prototype.constructor = RawExpression;\nRawExpression.prototype.toAQL = function () {\n  return String(this._value);\n};\n\nfunction NullLiteral(value) {\n  if (value && value instanceof NullLiteral) value = value._value;\n  if (value !== null && value !== undefined) {\n    throw new AqlError('Expected value to be null: ' + value);\n  }\n  this._value = value;\n}\nNullLiteral.prototype = new Expression();\nNullLiteral.prototype.constructor = NullLiteral;\nNullLiteral.prototype.toAQL = function () {\n  return 'null';\n};\n\nfunction BooleanLiteral(value) {\n  if (value && value instanceof BooleanLiteral) value = value._value;\n  this._value = Boolean(value);\n}\nBooleanLiteral.prototype = new Expression();\nBooleanLiteral.prototype.constructor = BooleanLiteral;\nBooleanLiteral.prototype.toAQL = function () {\n  return String(this._value);\n};\n\nfunction NumberLiteral(value) {\n  if (value && (\n    value instanceof NumberLiteral ||\n    value instanceof IntegerLiteral\n  )) value = value._value;\n  this._value = Number(value);\n  if (!isValidNumber(this._value)) {\n    throw new AqlError('Expected value to be a finite number: ' + value);\n  }\n}\nNumberLiteral.re = /^[-+]?[0-9]+(\\.[0-9]+)?$/;\nNumberLiteral.prototype = new Expression();\nNumberLiteral.prototype.constructor = NumberLiteral;\nNumberLiteral.prototype.toAQL = function () {\n  return String(this._value);\n};\n\nfunction IntegerLiteral(value) {\n  if (value && (\n    value instanceof NumberLiteral ||\n    value instanceof IntegerLiteral\n  )) value = value._value;\n  this._value = Number(value);\n  if (!isValidNumber(this._value) || Math.floor(this._value) !== this._value) {\n    throw new AqlError('Expected value to be a finite integer: ' + value);\n  }\n}\nIntegerLiteral.prototype = new Expression();\nIntegerLiteral.prototype.constructor = IntegerLiteral;\nIntegerLiteral.prototype.toAQL = function () {\n  return String(this._value);\n};\n\nfunction StringLiteral(value) {\n  if (value && value instanceof StringLiteral) value = value._value;\n  if (value && typeof value.toAQL === 'function') value = value.toAQL();\n  this._value = String(value);\n}\nStringLiteral.prototype = new Expression();\nStringLiteral.prototype.constructor = StringLiteral;\nStringLiteral.prototype.toAQL = function () {\n  return JSON.stringify(this._value);\n};\n\nfunction ListLiteral(value) {\n  if (value && value instanceof ListLiteral) value = value._value;\n  if (!value || !Array.isArray(value)) {\n    throw new AqlError('Expected value to be an array: ' + value);\n  }\n  this._value = value.map(autoCastToken);\n}\nListLiteral.prototype = new Expression();\nListLiteral.prototype.constructor = ListLiteral;\nListLiteral.prototype.toAQL = function () {\n  var value = this._value.map(wrapAQL);\n  return '[' + value.join(', ') + ']';\n};\n\nfunction ObjectLiteral(value) {\n  if (value && value instanceof ObjectLiteral) value = value._value;\n  if (!value || typeof value !== 'object') {\n    throw new AqlError('Expected value to be an object: ' + value);\n  }\n  this._value = {};\n  var self = this;\n  Object.keys(value).forEach(function (key) {\n    if (key.charAt(0) === ':') {\n      if (!key.slice(1).match(SimpleReference.re)) {\n        throw new AqlError('Expected key to be a well-formed dynamic property name: ' + key);\n      }\n      self._value['[' + key.slice(1) + ']'] = autoCastToken(value[key]);\n    } else if (\n      !isQuotedString(key) &&\n      !key.match(Identifier.re) &&\n      key !== String(Number(key))\n    ) {\n      self._value[JSON.stringify(key)] = autoCastToken(value[key]);\n    } else {\n      self._value[key] = autoCastToken(value[key]);\n    }\n  });\n}\nObjectLiteral.prototype = new Expression();\nObjectLiteral.prototype.constructor = ObjectLiteral;\nObjectLiteral.prototype.toAQL = function () {\n  var value = this._value;\n  var items = Object.keys(value).map(function (key) {\n    return key + ': ' + wrapAQL(value[key]);\n  });\n  return '{' + items.join(', ') + '}';\n};\n\nfunction RangeExpression(start, end) {\n  this._start = autoCastToken(start);\n  this._end = autoCastToken(end);\n}\nRangeExpression.re = /^([0-9]+)\\.\\.([0-9]+)$/;\nRangeExpression.prototype = new Expression();\nRangeExpression.prototype.constructor = RangeExpression;\nRangeExpression.prototype.toAQL = function () {\n  return wrapAQL(this._start) + '..' + wrapAQL(this._end);\n};\n\nfunction PropertyAccess(obj, keys) {\n  this._obj = autoCastToken(obj);\n  this._keys = keys.map(function (key) {\n    return autoCastToken(key);\n  });\n}\nPropertyAccess.prototype = new Expression();\nPropertyAccess.prototype.constructor = PropertyAccess;\nPropertyAccess.prototype.toAQL = function () {\n  return wrapAQL(this._obj) + this._keys.map(function (key) {\n    return '[' + wrapAQL(key) + ']';\n  }).join('');\n};\n\nfunction Keyword(value) {\n  if (value && value instanceof Keyword) value = value._value;\n  if (!value || typeof value !== 'string') {\n    throw new AqlError('Expected value to be a string: ' + value);\n  }\n  if (!value.match(Keyword.re)) {\n    throw new AqlError('Not a valid keyword: ' + value);\n  }\n  this._value = value;\n}\nKeyword.re = /^[_a-z][_0-9a-z]*$/i;\nKeyword.prototype = new Expression();\nKeyword.prototype.constructor = Keyword;\nKeyword.prototype.toAQL = function () {\n  return String(this._value).toUpperCase();\n};\n\nfunction Identifier(value) {\n  if (value) {\n    if (value.constructor && value.constructor.name === 'ArangoCollection') {\n      value = value.name();\n    } else if (value instanceof Identifier) {\n      value = value._value;\n    }\n  }\n  if (!value || typeof value !== 'string') {\n    throw new AqlError('Expected value to be a string: ' + value);\n  }\n  if (!value.match(Identifier.re)) {\n    throw new AqlError('Not a valid identifier: ' + value);\n  }\n  this._value = value;\n}\nIdentifier.re = /^[_@a-z][-_@0-9a-z]*$/i;\nIdentifier.prototype = new Expression();\nIdentifier.prototype.constructor = Identifier;\nIdentifier.prototype.toAQL = function () {\n  var value = String(this._value);\n  if (keywords.indexOf(value.toLowerCase()) !== -1 || value.indexOf('-') !== -1) {\n    return '`' + value + '`';\n  }\n  return value;\n};\n\nfunction SimpleReference(value) {\n  if (value) {\n    if (value.constructor && value.constructor.name === 'ArangoCollection') {\n      value = value.name();\n    } else if (value instanceof SimpleReference) {\n      value = value._value;\n    }\n  }\n  if (!value || typeof value !== 'string') {\n    throw new AqlError('Expected value to be a string: ' + value);\n  }\n  if (!value.match(SimpleReference.re)) {\n    throw new AqlError('Not a valid simple reference: ' + value);\n  }\n  this._value = value;\n}\nSimpleReference.re = /^([_@a-z][-_@0-9a-z]*|`[_@a-z][-_@0-9a-z]*`)(\\.[_@a-z][-_@0-9a-z]*|\\.`[_@a-z][-_@0-9a-z]*`|\\[\\*\\])*$/i;\nSimpleReference.prototype = new Expression();\nSimpleReference.prototype.constructor = SimpleReference;\nSimpleReference.prototype.toAQL = function () {\n  var value = String(this._value);\n  var tokens = value.split('.').map(function (token) {\n    if (token.charAt(0) !== '`' && (keywords.indexOf(token.toLowerCase()) !== -1 || token.indexOf('-') !== -1)) {\n      return '`' + token + '`';\n    }\n    return token;\n  });\n  return tokens.join('.');\n};\n\nfunction UnaryOperation(operator, value) {\n  if (!operator || typeof operator !== 'string') {\n    throw new AqlError('Expected operator to be a string: ' + operator);\n  }\n  this._operator = operator;\n  this._value = autoCastToken(value);\n}\nUnaryOperation.prototype = new Expression();\nUnaryOperation.prototype.constructor = UnaryOperation;\nUnaryOperation.prototype.toAQL = function () {\n  return this._operator + wrapAQL(this._value);\n};\n\nfunction BinaryOperation(operator, value1, value2) {\n  if (!operator || typeof operator !== 'string') {\n    throw new AqlError('Expected operator to be a string: ' + operator);\n  }\n  this._operator = operator;\n  this._value1 = autoCastToken(value1);\n  this._value2 = autoCastToken(value2);\n}\nBinaryOperation.prototype = new Operation();\nBinaryOperation.prototype.constructor = BinaryOperation;\nBinaryOperation.prototype.toAQL = function () {\n  return [wrapAQL(this._value1), this._operator, wrapAQL(this._value2)].join(' ');\n};\n\nfunction TernaryOperation(operator1, operator2, value1, value2, value3) {\n  if (!operator1 || typeof operator1 !== 'string') {\n    throw new AqlError('Expected operator 1 to be a string: ' + operator1);\n  }\n  if (!operator2 || typeof operator2 !== 'string') {\n    throw new AqlError('Expected operator 2 to be a string: ' + operator2);\n  }\n  this._operator1 = operator1;\n  this._operator2 = operator2;\n  this._value1 = autoCastToken(value1);\n  this._value2 = autoCastToken(value2);\n  this._value3 = autoCastToken(value3);\n}\nTernaryOperation.prototype = new Operation();\nTernaryOperation.prototype.constructor = TernaryOperation;\nTernaryOperation.prototype.toAQL = function () {\n  return [\n    wrapAQL(this._value1),\n    this._operator1,\n    wrapAQL(this._value2),\n    this._operator2,\n    wrapAQL(this._value3)\n  ].join(' ');\n};\n\nfunction NAryOperation(operator, values) {\n  if (!operator || typeof operator !== 'string') {\n    throw new AqlError('Expected operator to be a string: ' + operator);\n  }\n  this._operator = operator;\n  this._values = values.map(autoCastToken);\n}\nNAryOperation.prototype = new Operation();\nNAryOperation.prototype.constructor = NAryOperation;\nNAryOperation.prototype.toAQL = function () {\n  var values = this._values.map(wrapAQL);\n  return values.join(' ' + this._operator + ' ');\n};\n\nfunction FunctionCall(functionName, args) {\n  if (!functionName || typeof functionName !== 'string') {\n    throw new AqlError('Expected function name to be a string: ' + functionName);\n  }\n  if (!functionName.match(FunctionCall.re)) {\n    throw new AqlError('Not a valid function name: ' + functionName);\n  }\n  if (args && !Array.isArray(args)) {\n    throw new AqlError('Expected arguments to be an array: ' + args);\n  }\n  this._functionName = functionName;\n  this._args = args ? args.map(autoCastToken) : [];\n}\nFunctionCall.re = /^[_a-z][_0-9a-z]*(::[_a-z][_0-9a-z]*)*$/i;\nFunctionCall.prototype = new Expression();\nFunctionCall.prototype.constructor = FunctionCall;\nFunctionCall.prototype.toAQL = function () {\n  var args = this._args.map(wrapAQL);\n  return this._functionName + '(' + args.join(', ') + ')';\n};\n\nfunction ReturnExpression(prev, value, distinct) {\n  this._prev = prev;\n  this._value = autoCastToken(value);\n  this._distinct = distinct;\n}\nReturnExpression.prototype = new Expression();\nReturnExpression.prototype.constructor = ReturnExpression;\nReturnExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'RETURN' +\n    (this._distinct ? ' DISTINCT' : '') +\n    ' ' + wrapAQL(this._value)\n  );\n};\n\nfunction PartialStatement() {}\nPartialStatement.prototype.for = function (varname) {\n  var self = this, inFn;\n  inFn = function (expr) {\n    // assert expr is an expression\n    return new ForExpression(self, varname, expr);\n  };\n  return {in: inFn, in_: inFn};\n};\nPartialStatement.prototype.filter = function (expr) {\n  return new FilterExpression(this, expr);\n};\nPartialStatement.prototype.let = function (varname, expr) {\n  var dfns = expr === undefined ? varname : [[varname, expr]];\n  return new LetExpression(this, dfns);\n};\nPartialStatement.prototype.collect = function (varname, expr) {\n  var dfns = expr === undefined ? varname : [[varname, expr]];\n  return new CollectExpression(this, dfns);\n};\nPartialStatement.prototype.collectWithCountInto = function (varname) {\n  return new CollectWithCountIntoExpression(this, undefined, varname);\n};\nPartialStatement.prototype.sort = function () {\n  var args = Array.prototype.slice.call(arguments);\n  return new SortExpression(this, args);\n};\nPartialStatement.prototype.limit = function (x, y) {\n  return new LimitExpression(this, x, y);\n};\nPartialStatement.prototype.return = function (x) {\n  return new ReturnExpression(this, x, false);\n};\nPartialStatement.prototype.returnDistinct = function (x) {\n  return new ReturnExpression(this, x, true);\n};\nPartialStatement.prototype.remove = function (expr) {\n  var self = this, inFn;\n  inFn = function (collection) {\n    return new RemoveExpression(self, expr, collection);\n  };\n  return {into: inFn, in: inFn, in_: inFn};\n};\nPartialStatement.prototype.upsert = function (upsertExpr) {\n  var self = this;\n  function insertFn(insertExpr) {\n    function updateOrReplaceFn(replace) {\n      return function (updateOrReplaceExpr) {\n        function inFn(inCollection) {\n          return new UpsertExpression(\n            self,\n            upsertExpr,\n            insertExpr,\n            replace,\n            updateOrReplaceExpr,\n            inCollection\n          );\n        }\n        return {into: inFn, in: inFn, in_: inFn};\n      };\n    }\n    return {\n      update: updateOrReplaceFn(false),\n      replace: updateOrReplaceFn(true)\n    };\n  }\n  return {insert: insertFn};\n};\nPartialStatement.prototype.insert = function (expr) {\n  var self = this, inFn;\n  inFn = function (collection) {\n    return new InsertExpression(self, expr, collection);\n  };\n  return {into: inFn, in: inFn, in_: inFn};\n};\nPartialStatement.prototype.update = function (expr) {\n  var self = this, withFn, inFn;\n  withFn = function (withExpr) {\n    var inFn = function (collection) {\n      return new UpdateExpression(self, expr, withExpr, collection);\n    };\n    return {into: inFn, in: inFn, in_: inFn};\n  };\n  inFn = function (collection) {\n    return new UpdateExpression(self, expr, undefined, collection);\n  };\n  return {'with': withFn, with_: withFn, into: inFn, in: inFn, in_: inFn};\n};\nPartialStatement.prototype.replace = function (expr) {\n  var self = this, withFn, inFn;\n  withFn = function (withExpr) {\n    var inFn = function (collection) {\n      return new ReplaceExpression(self, expr, withExpr, collection);\n    };\n    return {into: inFn, in: inFn, in_: inFn};\n  };\n  inFn = function (collection) {\n    return new ReplaceExpression(self, expr, undefined, collection);\n  };\n  return {'with': withFn, with_: withFn, into: inFn, in: inFn, in_: inFn};\n};\n\nfunction ForExpression(prev, varname, expr) {\n  this._prev = prev;\n  this._varname = new Identifier(varname);\n  this._expr = autoCastToken(expr);\n}\nForExpression.prototype = new PartialStatement();\nForExpression.prototype.constructor = ForExpression;\nForExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'FOR ' + wrapAQL(this._varname) +\n    ' IN ' + wrapAQL(this._expr)\n  );\n};\n\nfunction FilterExpression(prev, expr) {\n  this._prev = prev;\n  this._expr = autoCastToken(expr);\n}\nFilterExpression.prototype = new PartialStatement();\nFilterExpression.prototype.constructor = FilterExpression;\nFilterExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'FILTER ' + wrapAQL(this._expr)\n  );\n};\n\nfunction LetExpression(prev, dfns) {\n  this._prev = prev;\n  this._dfns = new Definitions(dfns);\n}\nLetExpression.prototype = new PartialStatement();\nLetExpression.prototype.constructor = LetExpression;\nLetExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'LET ' + wrapAQL(this._dfns)\n  );\n};\n\nfunction CollectExpression(prev, dfns, varname, intoExpr, keepNames, options) {\n  this._prev = prev;\n  this._dfns = new Definitions(dfns);\n  if (!intoExpr) {\n    if (!varname) {\n      this.into = function (newVarname, newIntoExpr) {\n        return new CollectExpression(prev, dfns, newVarname, newIntoExpr, undefined, options);\n      };\n    } else {\n      this._varname = new Identifier(varname);\n      if (!keepNames) {\n        this.keep = function () {\n          var newKeepNames = Array.prototype.slice.call(arguments);\n          return new CollectExpression(prev, dfns, varname, undefined, newKeepNames, options);\n        };\n      } else {\n        if (!Array.isArray(keepNames)) {\n          throw new AqlError('Expected keep list to be an array: ' + keepNames);\n        }\n        if (!keepNames.length) {\n          throw new AqlError('Expected keep list not to be empty: ' + keepNames);\n        }\n        this._keep = keepNames.map(function (keepVar) {\n          return new Identifier(keepVar);\n        });\n      }\n    }\n  } else if (varname) {\n    this._varname = new Identifier(varname);\n    this._intoExpr = autoCastToken(intoExpr);\n  }\n  if (!options) {\n    this.options = function (newOpts) {\n      return new CollectExpression(prev, dfns, varname, intoExpr, keepNames, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n  if (!varname && !intoExpr && !keepNames) {\n    this.withCountInto = function (newVarname) {\n      return new CollectWithCountIntoExpression(prev, dfns, newVarname, options);\n    };\n  }\n}\nCollectExpression.prototype = new PartialStatement();\nCollectExpression.prototype.constructor = CollectExpression;\nCollectExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'COLLECT ' + wrapAQL(this._dfns) +\n    (this._varname ? ' INTO ' + wrapAQL(this._varname) + (\n      this._intoExpr ? ' = ' + wrapAQL(this._intoExpr) :\n      (this._keep ? ' KEEP ' + this._keep.map(function (keep) {\n        return keep.toAQL();\n      }).join(', ') : '')\n    ) : '') +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction CollectWithCountIntoExpression(prev, dfns, varname, options) {\n  this._prev = prev;\n  if (dfns) this._dfns = new Definitions(dfns);\n  this._varname = new Identifier(varname);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new CollectWithCountIntoExpression(prev, dfns, varname, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nCollectWithCountIntoExpression.prototype = new PartialStatement();\nCollectWithCountIntoExpression.prototype.constructor = CollectWithCountIntoExpression;\nCollectWithCountIntoExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'COLLECT' +\n    (this._dfns ? ' ' + wrapAQL(this._dfns) : '') +\n    ' WITH COUNT INTO ' + wrapAQL(this._varname) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction SortExpression(prev, args) {\n  if (!args || !Array.isArray(args)) {\n    throw new AqlError('Expected sort list to be an array: ' + args);\n  }\n  if (!args.length) {\n    throw new AqlError('Expected sort list not to be empty: ' + args);\n  }\n  this._prev = prev;\n  this._args = [];\n  var allowKeyword = false;\n  this._args = args.map(function (arg, i) {\n    if (!allowKeyword && arg) {\n      if (arg instanceof Keyword || (\n        typeof arg === 'string' && SortExpression.keywords.indexOf(arg.toUpperCase()) !== -1\n      )) {\n        throw new AqlError('Unexpected keyword ' + arg.toString() + ' at offset ' + i);\n      }\n    }\n    if (typeof arg === 'string' && SortExpression.keywords.indexOf(arg.toUpperCase()) !== -1) {\n      allowKeyword = false;\n      return new Keyword(arg);\n    } else {\n      allowKeyword = true;\n      return autoCastToken(arg);\n    }\n  });\n}\nSortExpression.keywords = ['ASC', 'DESC'];\nSortExpression.prototype = new PartialStatement();\nSortExpression.prototype.constructor = SortExpression;\nSortExpression.prototype.toAQL = function () {\n  var args = [], j = 0;\n  this._args.forEach(function (arg) {\n    if (arg instanceof Keyword) {\n      args[j] += ' ' + arg.toAQL();\n    } else {\n      j = args.push(wrapAQL(arg)) - 1;\n    }\n  });\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'SORT ' +\n    args.join(', ')\n  );\n};\n\nfunction LimitExpression(prev, offset, count) {\n  if (count === undefined) {\n    count = offset;\n    offset = undefined;\n  }\n  this._prev = prev;\n  this._offset = offset === undefined ? undefined : autoCastToken(offset);\n  this._count = autoCastToken(count);\n}\nLimitExpression.prototype = new PartialStatement();\nLimitExpression.prototype.constructor = LimitExpression;\nLimitExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'LIMIT ' + (\n      this._offset === undefined ?\n      wrapAQL(this._count) :\n      wrapAQL(this._offset) + ', ' + wrapAQL(this._count)\n    )\n  );\n};\n\nfunction RemoveExpression(prev, expr, collection, options) {\n  this._prev = prev;\n  this._expr = autoCastToken(expr);\n  this._collection = new Identifier(collection);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new RemoveExpression(prev, expr, collection, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nRemoveExpression.prototype = new PartialStatement();\nRemoveExpression.prototype.constructor = RemoveExpression;\nRemoveExpression.prototype.returnOld = function (x) {\n  return this.let(x, 'OLD').return(x);\n};\nRemoveExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'REMOVE ' + wrapAQL(this._expr) +\n    ' IN ' + wrapAQL(this._collection) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction UpsertExpression(prev, upsertExpr, insertExpr, replace, updateOrReplaceExpr, collection, options) {\n  this._prev = prev;\n  this._upsertExpr = autoCastToken(upsertExpr);\n  this._insertExpr = autoCastToken(insertExpr);\n  this._updateOrReplace = replace ? 'REPLACE' : 'UPDATE';\n  this._updateOrReplaceExpr = autoCastToken(updateOrReplaceExpr);\n  this._collection = new Identifier(collection);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new UpsertExpression(\n        prev,\n        upsertExpr,\n        insertExpr,\n        replace,\n        updateOrReplaceExpr,\n        collection,\n        newOpts\n      );\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nUpsertExpression.prototype = new PartialStatement();\nUpsertExpression.prototype.constructor = UpsertExpression;\nUpsertExpression.prototype.returnNew = function (x) {\n  return this.let(x, 'NEW').return(x);\n};\nUpsertExpression.prototype.returnOld = function (x) {\n  return this.let(x, 'OLD').return(x);\n};\nUpsertExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'UPSERT ' + wrapAQL(this._upsertExpr) +\n    ' INSERT ' + wrapAQL(this._insertExpr) +\n    ' ' + this._updateOrReplace + ' ' + wrapAQL(this._updateOrReplaceExpr) +\n    ' IN ' + wrapAQL(this._collection) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction InsertExpression(prev, expr, collection, options) {\n  this._prev = prev;\n  this._expr = autoCastToken(expr);\n  this._collection = new Identifier(collection);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new InsertExpression(prev, expr, collection, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nInsertExpression.prototype = new PartialStatement();\nInsertExpression.prototype.constructor = InsertExpression;\nInsertExpression.prototype.returnNew = function (x) {\n  return this.let(x, 'NEW').return(x);\n};\nInsertExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'INSERT ' + wrapAQL(this._expr) +\n    ' INTO ' + wrapAQL(this._collection) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction UpdateExpression(prev, expr, withExpr, collection, options) {\n  this._prev = prev;\n  this._expr = autoCastToken(expr);\n  this._withExpr = withExpr === undefined ? undefined : autoCastToken(withExpr);\n  this._collection = new Identifier(collection);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new UpdateExpression(prev, expr, withExpr, collection, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nUpdateExpression.prototype = new PartialStatement();\nUpdateExpression.prototype.constructor = UpdateExpression;\nUpdateExpression.prototype.returnNew = function (x) {\n  return this.let(x, 'NEW').return(x);\n};\nUpdateExpression.prototype.returnOld = function (x) {\n  return this.let(x, 'OLD').return(x);\n};\nUpdateExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'UPDATE ' + wrapAQL(this._expr) +\n    (this._withExpr ? ' WITH ' + wrapAQL(this._withExpr) : '') +\n    ' IN ' + wrapAQL(this._collection) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nfunction ReplaceExpression(prev, expr, withExpr, collection, options) {\n  this._prev = prev;\n  this._expr = autoCastToken(expr);\n  this._withExpr = withExpr === undefined ? undefined : autoCastToken(withExpr);\n  this._collection = new Identifier(collection);\n  if (!options) {\n    this.options = function (newOpts) {\n      return new ReplaceExpression(prev, expr, withExpr, collection, newOpts);\n    };\n  } else this._options = new ObjectLiteral(options);\n}\nReplaceExpression.prototype = new PartialStatement();\nReplaceExpression.prototype.constructor = ReplaceExpression;\nReplaceExpression.prototype.returnNew = function (x) {\n  return this.let(x, 'NEW').return(x);\n};\nReplaceExpression.prototype.returnOld = function (x) {\n  return this.let(x, 'OLD').return(x);\n};\nReplaceExpression.prototype.toAQL = function () {\n  return (\n    (this._prev ? this._prev.toAQL() + ' ' : '') +\n    'REPLACE ' + wrapAQL(this._expr) +\n    (this._withExpr ? ' WITH ' + wrapAQL(this._withExpr) : '') +\n    ' IN ' + wrapAQL(this._collection) +\n    (this._options ? ' OPTIONS ' + wrapAQL(this._options) : '')\n  );\n};\n\nexports.autoCastToken = autoCastToken;\nexports.RawExpression = RawExpression;\nexports.NullLiteral = NullLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NumberLiteral = NumberLiteral;\nexports.IntegerLiteral = IntegerLiteral;\nexports.StringLiteral = StringLiteral;\nexports.ListLiteral = ListLiteral;\nexports.ObjectLiteral = ObjectLiteral;\nexports.RangeExpression = RangeExpression;\nexports.PropertyAccess = PropertyAccess;\nexports.Keyword = Keyword;\nexports.Identifier = Identifier;\nexports.SimpleReference = SimpleReference;\nexports.UnaryOperation = UnaryOperation;\nexports.BinaryOperation = BinaryOperation;\nexports.TernaryOperation = TernaryOperation;\nexports.NAryOperation = NAryOperation;\nexports.FunctionCall = FunctionCall;\nexports.ForExpression = ForExpression;\nexports.FilterExpression = FilterExpression;\nexports.LetExpression = LetExpression;\nexports.CollectExpression = CollectExpression;\nexports.CollectWithCountIntoExpression = CollectWithCountIntoExpression;\nexports.SortExpression = SortExpression;\nexports.LimitExpression = LimitExpression;\nexports.ReturnExpression = ReturnExpression;\nexports.RemoveExpression = RemoveExpression;\nexports.UpsertExpression = UpsertExpression;\nexports.InsertExpression = InsertExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.ReplaceExpression = ReplaceExpression;\n\nexports._Expression = Expression;\nexports._Operation = Operation;\nexports._Statement = ReturnExpression;\nexports._PartialStatement = PartialStatement;\nexports._Definitions = Definitions;\n"}